{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","loadedTodos","selectUserId","inputQuery","setInputQuery","selectedValue","handleChangeSelect","className","name","type","placeholder","value","onChange","disabled","map","todo","cn","TodoList__item","completed","checked","readOnly","title","onClick","userId","id","BASE_URL","getTodos","a","fetch","response","json","getUser","CurrentUser","setSelectedUser","useState","user","setUser","useEffect","then","email","phone","App","todos","setTodos","selectedUserId","setSelectedUserId","query","setQuery","setSelectedValue","handleChangeInput","useCallback","event","target","filteredTodos","filter","includes","toLowerCase","preparedTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ce92f339.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport cn from 'classnames';\n\ntype Props = {\n  loadedTodos: Todo[];\n  inputQuery: string;\n  setInputQuery: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  selectUserId: (userId: number) => void;\n  selectedValue: string;\n  handleChangeSelect: (event: React.ChangeEvent<HTMLSelectElement>) => void;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  loadedTodos,\n  selectUserId,\n  inputQuery,\n  setInputQuery,\n  selectedValue,\n  handleChangeSelect,\n}) => {\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n      {loadedTodos ? (\n        <div className=\"TodoList__list-container\">\n          <input\n            className=\"TodoList__filter\"\n            name=\"TodoList__filter\"\n            type=\"text\"\n            placeholder=\"Choose todo\"\n            value={inputQuery}\n            onChange={setInputQuery}\n          />\n          <label>\n            <select\n              className=\"TodoList__filter\"\n              value={selectedValue}\n              onChange={handleChangeSelect}\n              name=\"TodoSelect\"\n            >\n              <option value=\"0\" disabled>\n                Choose a status of todo\n              </option>\n              <option value=\"all\">All</option>\n              <option value=\"active\">Not completed</option>\n              <option value=\"completed\">Completed</option>\n            </select>\n          </label>\n\n          <ul className=\"TodoList__list\">\n            {loadedTodos.map(todo => (\n              <li\n                key={todo.id}\n                className={cn({\n                  TodoList__item: true,\n                  'TodoList__item--unchecked': !todo.completed,\n                  'TodoList__item--checked': todo.completed,\n                })}\n              >\n                <label>\n                  <input\n                    checked={todo.completed}\n                    type=\"checkbox\"\n                    readOnly\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className=\"\n              TodoList__user-button\n              TodoList__user-button--selected\n              button\n            \"\n                  type=\"button\"\n                  onClick={() => {\n                    selectUserId(todo.userId);\n                  }}\n                >\n                  User&nbsp; #\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n\n        </div>\n      ) : (\n        <p>Loading...</p>\n      )}\n    </div>\n  );\n};\n","export const BASE_URL = 'https://mate.academy/students-api';\n\nexport const getTodos = async (): Promise<Todo[]> => {\n  const response = await fetch(`${BASE_URL}/todos`);\n\n  return response.json();\n};\n\nexport const getUser = async (userId: number): Promise<User> => {\n  const response = await fetch(`${BASE_URL}/users/${userId}`);\n\n  return response.json();\n};\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport './CurrentUser.scss';\n\ntype Props = {\n  userId: number;\n  setSelectedUser: (userId: number) => void;\n};\n\nexport const CurrentUser: React.FC<Props> = ({ userId, setSelectedUser }) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    getUser(userId).then(setUser);\n  }, [userId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      {user ? (\n        <>\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              Selected user:&nbsp;\n              {userId}\n            </span>\n          </h2>\n\n          <h3 className=\"CurrentUser__name\">{user.name}</h3>\n          <p className=\"CurrentUser__email\">{user.email}</p>\n          <p className=\"CurrentUser__phone\">{user.phone}</p>\n          <button\n            className=\"CurrentUser__button\"\n            type=\"button\"\n            onClick={() => setSelectedUser(0)}\n          >\n            Clear\n          </button>\n        </>\n      ) : (\n        <p>Loading...</p>\n      )}\n    </div>\n  );\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nimport { getTodos } from './api';\n\nconst App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [query, setQuery] = useState('');\n  const [selectedValue, setSelectedValue] = useState('all');\n\n  useEffect(() => {\n    getTodos().then(setTodos);\n  }, []);\n\n  const handleChangeInput = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      setQuery(event.target.value);\n    }, [],\n  );\n\n  const handleChangeSelect = useCallback(\n    (event: React.ChangeEvent<HTMLSelectElement>) => {\n      setSelectedValue(event.target.value);\n    }, [],\n  );\n\n  const preparedTodos = () => {\n    const filteredTodos = todos\n      .filter(todo => todo.title.includes(query.toLowerCase()));\n\n    if (selectedValue === 'active') {\n      return filteredTodos.filter(todo => !todo.completed);\n    }\n\n    if (selectedValue === 'completed') {\n      return filteredTodos.filter(todo => todo.completed);\n    }\n\n    return filteredTodos;\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          selectUserId={setSelectedUserId}\n          loadedTodos={preparedTodos()}\n          inputQuery={query}\n          setInputQuery={handleChangeInput}\n          selectedValue={selectedValue}\n          handleChangeSelect={handleChangeSelect}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              setSelectedUser={setSelectedUserId}\n              userId={selectedUserId}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}