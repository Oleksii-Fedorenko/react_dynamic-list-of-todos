{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","loadedTodos","userId","selectUserId","inputQuery","setInputQuery","selectedValue","handleChangeSelect","className","name","type","placeholder","value","onChange","disabled","map","todo","cn","TodoList__item","completed","checked","readOnly","title","onClick","id","BASE_URL","getTodos","a","fetch","response","json","getUser","CurrentUser","setSelectedUser","useState","user","setUser","fetchUser","useCallback","newUser","useEffect","email","phone","App","todos","setTodos","selectedUserId","setSelectedUserId","query","setQuery","setSelectedValue","getData","data","handleChangeInput","event","target","filteredTodos","filter","includes","toLowerCase","preparedTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1ca1d8e2.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport cn from 'classnames';\n\ntype Props = {\n  loadedTodos: Todo[];\n  userId: number | null;\n  inputQuery: string;\n  setInputQuery: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  selectUserId: (userId: number) => void;\n  selectedValue: string;\n  handleChangeSelect: (event: React.ChangeEvent<HTMLSelectElement>) => void;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  loadedTodos,\n  userId,\n  selectUserId,\n  inputQuery,\n  setInputQuery,\n  selectedValue,\n  handleChangeSelect,\n}) => {\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n      {loadedTodos ? (\n        <div className=\"TodoList__list-container\">\n          <input\n            data-cy=\"filterByTitle\"\n            className=\"TodoList__filter\"\n            name=\"TodoList__filter\"\n            type=\"text\"\n            placeholder=\"Choose todo\"\n            value={inputQuery}\n            onChange={setInputQuery}\n          />\n          <label>\n            <select\n              className=\"TodoList__filter\"\n              value={selectedValue}\n              onChange={handleChangeSelect}\n              name=\"TodoSelect\"\n            >\n              <option value=\"0\" disabled>\n                Choose a status of todo\n              </option>\n              <option value=\"all\">All</option>\n              <option value=\"active\">Not completed</option>\n              <option value=\"completed\">Completed</option>\n            </select>\n          </label>\n\n          <ul\n            data-cy=\"listOfTodos\"\n            className=\"TodoList__list\"\n          >\n            {loadedTodos.map(todo => (\n              <li\n                key={todo.id}\n                className={cn({\n                  TodoList__item: true,\n                  'TodoList__item--unchecked': !todo.completed,\n                  'TodoList__item--checked': todo.completed,\n                })}\n              >\n                <label>\n                  <input\n                    checked={todo.completed}\n                    type=\"checkbox\"\n                    readOnly\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className={cn(\n                    'TodoList__user-button', 'button',\n                    {\n                      'TodoList__user-button--selected': todo.userId === userId,\n                    },\n                  )}\n                  type=\"button\"\n                  onClick={() => {\n                    selectUserId(todo.userId);\n                  }}\n                >\n                  User&nbsp; #\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n\n        </div>\n      ) : (\n        <p>Loading...</p>\n      )}\n    </div>\n  );\n};\n","export const BASE_URL = 'https://mate.academy/students-api';\n\nexport const getTodos = async (): Promise<Todo[]> => {\n  const response = await fetch(`${BASE_URL}/todos`);\n\n  return response.json();\n};\n\nexport const getUser = async (userId: number): Promise<User> => {\n  const response = await fetch(`${BASE_URL}/users/${userId}`);\n\n  return response.json();\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport './CurrentUser.scss';\n\ntype Props = {\n  userId: number;\n  setSelectedUser: (userId: number | null) => void;\n};\n\nexport const CurrentUser: React.FC<Props> = ({ userId, setSelectedUser }) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  const fetchUser = useCallback(async () => {\n    const newUser = await getUser(userId);\n\n    setUser(newUser);\n  }, [userId]);\n\n  useEffect(() => {\n    fetchUser();\n  }, [userId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      {user ? (\n        <>\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              Selected user:&nbsp;\n              {userId}\n            </span>\n          </h2>\n\n          <h3\n            data-cy=\"userName\"\n            className=\"CurrentUser__name\"\n          >\n            {user.name}\n          </h3>\n          <p className=\"CurrentUser__email\">{user.email}</p>\n          <p className=\"CurrentUser__phone\">{user.phone}</p>\n          {userId && (\n            <button\n              data-cy=\"userButton\"\n              className=\"CurrentUser__button\"\n              type=\"button\"\n              onClick={() => setSelectedUser(0)}\n            >\n              Clear\n            </button>\n          )}\n\n        </>\n      ) : (\n        <p>Loading...</p>\n      )}\n    </div>\n  );\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nimport { getTodos } from './api';\n\nconst App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedUserId, setSelectedUserId] = useState<number | null>(null);\n  const [query, setQuery] = useState('');\n  const [selectedValue, setSelectedValue] = useState('all');\n\n  const getData = useCallback(async () => {\n    const data = await getTodos();\n\n    setTodos(data);\n  }, []);\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const handleChangeInput = useCallback((\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    setQuery(event.target.value);\n  }, []);\n\n  const handleChangeSelect = useCallback(\n    (event: React.ChangeEvent<HTMLSelectElement>) => {\n      setSelectedValue(event.target.value);\n    }, [],\n  );\n\n  const preparedTodos = () => {\n    const filteredTodos = todos\n      .filter(todo => todo.title.includes(query.toLowerCase()));\n\n    if (selectedValue === 'active') {\n      return filteredTodos.filter(todo => !todo.completed);\n    }\n\n    if (selectedValue === 'completed') {\n      return filteredTodos.filter(todo => todo.completed);\n    }\n\n    return filteredTodos;\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          setInputQuery={handleChangeInput}\n          handleChangeSelect={handleChangeSelect}\n          loadedTodos={preparedTodos()}\n          selectUserId={setSelectedUserId}\n          userId={selectedUserId}\n          inputQuery={query}\n          selectedValue={selectedValue}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              setSelectedUser={setSelectedUserId}\n              userId={selectedUserId}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}